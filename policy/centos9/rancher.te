policy_module(rancher, 1.0.0)

gen_require(`
    type container_runtime_t, unconfined_service_t;
    type container_file_t;
')

########################
# type rke_kubereader_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type kubernetes_file_t;
        class dir { open read search };
        class file { getaddr open read };
        class lnk_file { getattr read };
')
container_domain_template(rke_kubereader, container)
virt_sandbox_domain(rke_kubereader_t)
corenet_unconfined(rke_kubereader_t)
allow rke_kubereader_t kubernetes_file_t:dir { open read search };
allow rke_kubereader_t kubernetes_file_t:file { getattr open read };
allow rke_kubereader_t kubernetes_file_t:lnk_file { getattr read };

########################
# type rke_logreader_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type container_log_t;
        type syslogd_var_run_t;
        type var_log_t;
        class dir { read search };
        class file { getattr map open read watch };
        class lnk_file { getattr read };
')
container_domain_template(rke_logreader, container)
virt_sandbox_domain(rke_logreader_t)
corenet_unconfined(rke_logreader_t)
allow rke_logreader_t container_log_t:dir { open read search };
allow rke_logreader_t container_log_t:lnk_file { getattr read };
allow rke_logreader_t container_log_t:file { getattr open read watch };
allow rke_logreader_t container_var_lib_t:dir search;
allow rke_logreader_t container_var_lib_t:file { getattr open read watch };
allow rke_logreader_t container_var_lib_t:lnk_file { getattr read };
allow rke_logreader_t syslogd_var_run_t:dir read;
allow rke_logreader_t syslogd_var_run_t:file { getattr map open read };
allow rke_logreader_t var_log_t:dir read;
allow rke_logreader_t var_log_t:file { getattr map open read watch };

########################
# type rke_container_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type container_log_t;
        type kubernetes_file_t;
        type container_var_run_t;
        class dir { read search };
        class file { open read };
')
type rke_opt_t;
files_type(rke_opt_t)
container_domain_template(rke_container, container)
virt_sandbox_domain(rke_container_t)
corenet_unconfined(rke_container_t)
manage_dirs_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_files_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_dirs_pattern(rke_container_t, container_log_t, container_log_t)
manage_files_pattern(rke_container_t, container_log_t, container_log_t)
manage_dirs_pattern(rke_container_t, kubernetes_file_t, kubernetes_file_t)
manage_files_pattern(rke_container_t, kubernetes_file_t, kubernetes_file_t)
manage_dirs_pattern(rke_container_t, rke_opt_t, rke_opt_t)
manage_files_pattern(rke_container_t, rke_opt_t, rke_opt_t)
manage_dirs_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_files_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_dirs_pattern(rke_container_t, container_var_run_t, container_var_run_t)
manage_files_pattern(rke_container_t, container_var_run_t, container_var_run_t)
allow rke_container_t self:tcp_socket { accept listen };
allow rke_container_t container_var_lib_t:file map;
allow rke_container_t rke_opt_t:file map;
allow rke_container_t container_var_lib_t:dir { relabelfrom relabelto };
allow rke_container_t container_var_lib_t:file { relabelfrom relabelto };
allow rke_container_t rke_opt_t:dir { relabelfrom relabelto };
allow rke_container_t rke_opt_t:file { relabelfrom relabelto };

########################
# type rke_network_t   #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type iptables_var_run_t;
        type var_run_t;
        type kernel_t;
')
container_domain_template(rke_network, container)
virt_sandbox_domain(rke_network_t)
corenet_unconfined(rke_network_t)
manage_dirs_pattern(rke_network_t, iptables_var_run_t, iptables_var_run_t)
manage_files_pattern(rke_network_t, iptables_var_run_t, iptables_var_run_t)
manage_dirs_pattern(rke_network_t, var_run_t, var_run_t)
manage_files_pattern(rke_network_t, var_run_t, var_run_t)
allow rke_network_t kernel_t:system module_request;
allow rke_network_t kernel_t:unix_dgram_socket sendto;
allow rke_network_t self:netlink_route_socket nlmsg_write;

############################################################################
# type prom_node_exporter_t   				 	           #
# target: prometheus-node-exporter container in Rancher's monitoring chart #
############################################################################
require {
	type container_runtime_t;
	type prom_node_exporter_t;
	type etc_t;
	type init_t;
	type lib_t;
	type proc_mdstat_t;
	type proc_net_t;
	type proc_t;
	type security_t;
	type sysfs_t;

	class dir { getattr open read search };
	class file { getattr open read };
	class lnk_file read;
	class netlink_route_socket { bind create getattr getopt nlmsg_read read write };
	class tcp_socket { accept getattr read setopt write };
}

# Create type prometheus_node_exporter_t;
type prom_node_exporter_t;

# Allow container_runtime_t to read directories and files of prom_node_exporter_t.
container_domain_template(prom_node_exporter_t, container)

# Allow container_runtime_t to read directories and files of prom_node_exporter_t.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { search } for  pid=243339 comm="k3s-server" path="/proc/..." scontext=system_u:system_r:container_runtime_t:s0 tcontext=system_u:system_r:prom_node_exporter_t:s0 tclass=dir permissive=1
#allow container_runtime_t prom_node_exporter_t:dir { open read search };

# Allow container_runtime_t to get attributes and read files of prom_node_exporter_t.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { getattr } for  pid=243339 comm="k3s-server" path="/proc/..." scontext=system_u:system_r:container_runtime_t:s0 tcontext=system_u:system_r:prom_node_exporter_t:s0 tclass=file permissive=1
#allow container_runtime_t prom_node_exporter_t:file { getattr open read };

# Allow container_runtime_t to read symbolic links of prom_node_exporter_t.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=243339 comm="k3s-server" path="/proc/..." scontext=system_u:system_r:container_runtime_t:s0 tcontext=system_u:system_r:prom_node_exporter_t:s0 tclass=lnk_file permissive=1
#allow container_runtime_t prom_node_exporter_t:lnk_file read;

#============= prom_node_exporter_t ==============

# Allow prom_node_exporter_t to read symbolic links in /etc.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/etc/os-release" tclass=lnk_file permissive=1
allow prom_node_exporter_t etc_t:lnk_file read;

# Allow prom_node_exporter_t to search init_t directories.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { search } for  pid=1085727 comm="node_exporter" path="/proc/1" tclass=dir permissive=1
allow prom_node_exporter_t init_t:dir search;

# Allow prom_node_exporter_t to read and open init_t files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/1/mounts" tclass=file permissive=1
allow prom_node_exporter_t init_t:file { open read };

# Allow prom_node_exporter_t to read and open library files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/lib/..." tclass=file permissive=1
allow prom_node_exporter_t lib_t:file { open read };

# Allow prom_node_exporter_t to read and open proc_mdstat_t files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/mdstat" tclass=file permissive=1
allow prom_node_exporter_t proc_mdstat_t:file { open read };

# Allow prom_node_exporter_t to read and open proc_net_t files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/net/udp" tclass=file permissive=1
allow prom_node_exporter_t proc_net_t:file { open read };

# Allow prom_node_exporter_t to read symbolic links in proc_net_t.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/net/self" tclass=lnk_file permissive=1
allow prom_node_exporter_t proc_net_t:lnk_file read;

# Allow prom_node_exporter_t to read and open proc_t files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/stat" tclass=file permissive=1
allow prom_node_exporter_t proc_t:file { open read };

# Allow prom_node_exporter_t to read symbolic links in proc_t.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/proc/self" tclass=lnk_file permissive=1
allow prom_node_exporter_t proc_t:lnk_file read;

# Allow prom_node_exporter_t to get attributes and read security_t files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { getattr } for  pid=1085727 comm="node_exporter" path="/sys/fs/selinux/enforce" tclass=file permissive=1
allow prom_node_exporter_t security_t:file { getattr open read };

# Allow prom_node_exporter_t to access its own directories and files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { getattr } for  pid=1085727 comm="node_exporter" path="/proc/..." tclass=dir permissive=1
allow prom_node_exporter_t self:dir { getattr search };
allow prom_node_exporter_t self:file { open read };

# Allow prom_node_exporter_t to interact with netlink_route_socket.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { create } for  pid=1085727 comm="node_exporter" scontext=system_u:system_r:prom_node_exporter_t:s0 tclass=netlink_route_socket permissive=1
allow prom_node_exporter_t self:netlink_route_socket { bind create getattr getopt nlmsg_read read write };

# Allow prom_node_exporter_t to interact with TCP sockets.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { accept } for  pid=1085727 comm="node_exporter" tclass=tcp_socket permissive=1
allow prom_node_exporter_t self:tcp_socket { accept getattr read setopt write };

# Allow prom_node_exporter_t to read sysfs directories and files.
# AVC Example: type=AVC msg=audit(...): avc:  denied  { read } for  pid=1085727 comm="node_exporter" path="/sys/..." tclass=file permissive=1
allow prom_node_exporter_t sysfs_t:dir read;
allow prom_node_exporter_t sysfs_t:file { getattr open read };
allow prom_node_exporter_t sysfs_t:lnk_file read;
